for (i in 1:12) {
## calculate column and channel
cat("i =",i,"\n")
c1 <- (i-1) %% 4 + 1
c2 <- (i-c1) %/% 4 + 1
cat(c1, c2)
}
cat(c1, c2,"\n")
for (i in 1:12) {
## calculate column and channel
cat("i =",i,"\n")
c1 <- (i-1) %% 4 + 1
c2 <- (i-c1) %/% 4 + 1
cat(c1, c2,"\n")
}
if(!require("caret")){
install.packages("caret")
}
if(!require("h20")){
install.packages("caret")
}
# library(caret)
library(h20)
if(!require("h20")){
install.packages("caret")
}
if(!require("h2o")){
install.packages("caret")
}
# library(caret)
library(h2o)
if(!require("h2o")){
install.packages("h2o")
}
# library(caret)
library(h2o)
rf_train = function(x_train, y_train, param_grid){
t = proc.time()
# train_file = as.data.frame(cbind(x_train, y_train))
#
# classifier = randomForest(y_train ~ ., data = train_file,
#                           importance = TRUE,
#                           ntree = n_tree)
#
model_list = list()
if(is.null(param_grid)){
h2o_hypergrid = list(
ntrees = 200,
mtries = 1,
sample_rate = .65)
} else {
h2o_hypergrid = grid
}
search_criteria = list(strategy = "Cartesian")
h2o.no_progress()
h2o.init()
### the dimension of response arrat is * x 4 x 3, which requires 12 classifiers
### this part can be parallelized
for (i in 1:12){
## calculate column and channel
c1 = (i-1) %% 4 + 1
c2 = (i-c1) %/% 4 + 1
featMat = x_train[, , c2]
labMat = y_train[, c1, c2]
trainMat = cbind(featMat, labMat)
colnames(trainMat) = c(1:9)
h2o_trainMat = as.h2o(trainMat)
x = c(1:8)
y = 9
## train randomForest model
grid <- h2o.grid(
algorithm = "randomForest",
grid_id = "rf_grid",
x = x,
y = y,
training_frame = h2o_trainMat,
hyper_params = h2o_hypergrid,
search_criteria = search_criteria)
grid_perf <- h2o.getGrid(
grid_id = "rf_grid",
sort_by = "mse",
decreasing = FALSE)
best_model_id <- grid_perf@model_ids[[1]]
best_model <- h2o.getModel(best_model_id)
modelList[i] <- list(model=best_model, grid=grid_perf)
}
train_time = (proc.time()-t)[3]
cat("Training time: ", train_time)
return(modelList)
}
load("feature_train.RData")
load("/output/feature_train.RData")
load("~/Documents/Spring2019/ADS/Spring2019-Proj3-spring2019-proj3-grp6/output/feature_train.RData")
x_train = dat_train$feature
y_train = dat_train$label
rf_train(x_train, y_train)
param_grid = list(ntrees=50, mtries = 1, sample_rate = .65)
dim(x_train)
dim(y_train)
mini_x_train = [1:2000, ,]
mini_x_train = x_train[1:2000, ,]
dim(mini_x_train)
mini_y_train = y_train[1:2000,,]
dim(mini_y_train)
rf_train(mini_x_train, mini_y_train, param_grid)
rf_train(mini_x_train, mini_y_train, param_grid)
rf_train(mini_x_train, mini_y_train, param_grid)
#
if(!require("randomForest")){
install.packages("randomForest")
}
library(randomForest)
# library(caret)
library(h2o)
rf_train = function(x_train, y_train, param_grid){
t = proc.time()
# train_file = as.data.frame(cbind(x_train, y_train))
#
# classifier = randomForest(y_train ~ ., data = train_file,
#                           importance = TRUE,
#                           ntree = n_tree)
#
model_list = list()
if(is.null(param_grid)){
h2o_hypergrid = list(
ntrees = 200,
mtries = 1,
sample_rate = .65)
} else {
h2o_hypergrid = param_grid
}
search_criteria = list(strategy = "Cartesian")
h2o.init()
### the dimension of response arrat is * x 4 x 3, which requires 12 classifiers
### this part can be parallelized
for (i in 1:12){
## calculate column and channel
c1 = (i-1) %% 4 + 1
c2 = (i-c1) %/% 4 + 1
featMat = x_train[, , c2]
labMat = y_train[, c1, c2]
trainMat = cbind(featMat, labMat)
colnames(trainMat) = c(1:9)
h2o_trainMat = as.h2o(trainMat)
x = c(1:8)
y = 9
## train randomForest model
grid <- h2o.grid(
algorithm = "randomForest",
grid_id = "rf_grid",
x = x,
y = y,
training_frame = h2o_trainMat,
hyper_params = h2o_hypergrid,
search_criteria = search_criteria)
grid_perf <- h2o.getGrid(
grid_id = "rf_grid",
sort_by = "mse",
decreasing = FALSE)
best_model_id <- grid_perf@model_ids[[1]]
best_model <- h2o.getModel(best_model_id)
modelList[i] <- list(model=best_model, grid=grid_perf)
}
train_time = (proc.time()-t)[3]
cat("Training time: ", train_time)
return(modelList)
}
rf_train(mini_x_train, mini_y_train, param_grid)
